#!/usr/bin/env python3
import os
import sys
import json

from translate_cli import translate

from translate_cli.format import bold
from translate_cli.format import italic
from translate_cli.format import underline
from translate_cli.lang_map import lang_maps


def get_help():
    print('''usage: trans [OPTIONS] [SOURCE_LANGUAGE]:[TARGET_LANGUAGE] [TEXT]

    A simple cli tool to translate text with google translate

OPTIONS:
    -h, --help
        print help message
    -d, --dict
        dictionary mode
    -l, --list
        list supported language codes

EXAMPLES:
    trans awesome :fr
        translate ‘awesome’ to French
    trans python -d
        lookup ‘python’ using dictionary mode''')
    sys.exit(0)


def list_codes():
    for n, i in enumerate(lang_maps.items()):
        if n % 2 == 0:
            print(f'{i[1]["name"]:20} -->   {underline.format(bold.format(i[0])):3}')
        else:
            print(f'{i[1]["name"]:20} -->   {underline.format(bold.format(i[0])):3}', end = '   ')
    sys.exit(0)


def parse_args():
    arguments = sys.argv[1:]
    is_dict = False
    sl, tl = 'auto', 'en' # in case not specified

    for i in arguments[:]:
        if i == '-h' or i == '--help':
            get_help()
        elif i == '-l' or i == '--list':
            list_codes()
        elif i == '-d' or i == '--dict':
            arguments.remove(i)
            is_dict = True
        elif ':' in i:
            sl, tl = i.split(':')
            arguments.remove(i)

    if len(arguments) == 0:
        print('There is nothing to translate!')
        sys.exit(1)
    text = ' '.join(arguments)
    # in case only specified ':', ':zh' or 'en:'...
    if not sl: sl = 'auto'
    if not tl: tl = 'en'
    # check if lang code is valid
    if sl not in lang_maps or tl not in lang_maps:
        if sl == 'auto' and tl != 'auto':
            pass
        else:
            raise ValueError('Invalid language code.')
    return is_dict, sl, tl, text


def main():
    is_dict, sl, tl, text = parse_args()
    result = translate(text, sl, tl)

    if isinstance(result['source_pronunciation'], str):
        _source_pronunciation = italic.format(result['source_pronunciation'])
    else:
        result['source_pronunciation'] = None

    # dictionary mode
    if is_dict:
        print(text)
        if result['source_pronunciation']: print(f'/{_source_pronunciation}/')
        print()

        for i in result['definitions']:
            print(i[0])
            for _i in i[1]:
                print(f'{" ":4}{_i}\n') 

        if len(result['synonyms']) != 0: print('Synonyms')
        for j in result['synonyms']:
            print(f'{" ":4}{j[0]}')
            for _j in j[1]:
                print(f'{" ":8}- {bold.format(", ".join(_j))}')
            print()

        if len(result['examples']) != 0: print('Example')
        for k in result['examples']:
            k = k.replace('<b>', '\033[1m\033[4m')
            k = k.replace('</b>', '\033[0m')
            print(f'{" ":4}- {k}\n')

    # translation mode
    else:
        _text = underline.format(text)

        try:
            _sl = underline.format(lang_maps[result['src_language']]['name'])
        except KeyError:
            _sl = underline.format(result['src_language'])

        _tl = bold.format(lang_maps[tl]['name'])
        _result = bold.format(result['translation'])
        _results = bold.format(', '.join(result['translations']))
        _target_pronunciation = italic.format(result['target_pronunciation'])

        print(text)
        if result['source_pronunciation']: print(f'/{_source_pronunciation}/')
        print(f'\n{_result}')
        if result['target_pronunciation'] \
                and isinstance(result['target_pronunciation'], str):
            print(f'/{_target_pronunciation}/')

        print(
f'''
Translations of {_text}
[ {_sl} -> {_tl} ]

{_text}
    {_results}'''
        )

if __name__ == '__main__':
    sys.exit(main())
